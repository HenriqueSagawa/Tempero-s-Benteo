datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  address       String?
  type          String    @default("cliente")

  addresses Addresses[]
  orders Orders[]
  reviews Reviews[]
  carts Carts[]
  notification Notifications[]

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Addresses {
  id         String  @id @default(cuid())
  address    String
  number     String
  complement String?
  cep        String
  city       String
  state      String
  Country    String  @default("Brasil")
  user_id    String

  user   User     @relation(fields: [user_id], references: [id])
  orders Orders[]
}

model Categories {
  id          String  @id @default(cuid())
  name        String
  description String?

  products Products[]
}

model Products {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Int
  stock       Int      @default(0)
  status      String
  updateAt    DateTime @default(now()) @updatedAt
  category_id String

  category        Categories       @relation(fields: [category_id], references: [id])
  images          Image_product[]
  products_cart   Product_cart[]
  products_orders Product_orders[]
  reviews         Reviews[]
}

model Image_product {
  id          String  @id @default(cuid())
  url_image   String
  description String?
  product_id  String

  product Products @relation(fields: [product_id], references: [id])
}

model Carts {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  status    String   @default("ativo")
  user_id   String

  user     User           @relation(fields: [user_id], references: [id])
  products Product_cart[]
}

model Product_cart {
  id         String @id @default(cuid())
  amount     Int    @default(1)
  unit_price Int
  cart_id    String
  product_id String

  cart    Carts    @relation(fields: [cart_id], references: [id])
  product Products @relation(fields: [product_id], references: [id])
}

enum OrderStatus {
  pendente
  pago
  enviado
  entregue
  cancelado
}

model Orders {
  id         String   @id @default(cuid())
  date_order DateTime @default(now())
  total      Int
  status     OrderStatus @default(pendente)
  user_id    String
  address_id String

  user    User      @relation(fields: [user_id], references: [id])
  address Addresses @relation(fields: [address_id], references: [id])
  products Product_orders[]
}

model Product_orders {
  id String @id @default(cuid())
  amount Int
  unit_price Int
  order_id String
  product_id String

  order Orders @relation(fields: [order_id], references: [id])
  product Products @relation(fields: [product_id], references: [id])
}

model Reviews {
  id String @id @default(cuid())
  note Int @db.SmallInt
  comment String?
  date DateTime @default(now())
  user_id String
  product_id String

  user User @relation(fields: [user_id], references: [id])
  product Products @relation(fields: [product_id], references: [id])

}

model Notifications {
  id String @id @default(cuid())
  message String
  type String
  read Boolean @default(false)
  date DateTime @default(now())
  user_id String

  user User  @relation(fields: [user_id], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}